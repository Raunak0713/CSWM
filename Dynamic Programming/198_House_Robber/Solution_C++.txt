----------
Recursion:
----------
class Solution {
    public:
    int rob(vector<int>& nums) {
        return solve(nums,0);
    }
    public:
    int solve(vector<int>& nums,int i){
        if(i>=nums.size()) return 0;
        int a = nums[i] + solve(nums,i+2);
        int b = solve(nums,i+1);
        return max(a,b);
    }
};
------------
Memoization:
------------
class Solution {
    vector<int> DP;
    public:
    int rob(vector<int>& nums) {
        DP.resize(nums.size()+1,-1);
        return solve(nums,0);
    }
    public:
    int solve(vector<int>& nums,int i){
        if(i>=nums.size()) return 0;
        if(DP[i] != -1) return DP[i];
        int a = nums[i] + solve(nums,i+2);
        int b = solve(nums,i+1);
        return DP[i] = max(a,b);
    }
};
------------
Tabulation :
------------
class Solution {
    vector<int> DP;
    public:
    int rob(vector<int>& nums) {
        DP.resize(nums.size()+1,-1);
        DP[0] = 0;
        DP[1] = nums[0];
        for(int i=2;i<=nums.size();i++){
            int a = nums[i-1] + DP[i-2];
            int b = DP[i-1];
            DP[i] = max(a,b);
        }
        return DP[nums.size()];
    }
};
--------------------
Space Optimization :
--------------------
class Solution {
    public:
    int rob(vector<int>& nums) {
        int first = 0;
        int second = nums[0];
        for(int i=2;i<=nums.size();i++){
            int next = max(nums[i-1] + first,second);
            first = second;
            second = next;
        }
        return second;
    }
};