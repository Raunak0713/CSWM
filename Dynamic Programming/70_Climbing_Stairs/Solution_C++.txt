----------
Recursion:
----------
class Solution {
public:
    int climbStairs(int n) {
        if(n<=1) return 1;
        return climbStairs(n-1) + climbStairs(n-2);
    }
};
------------
Memoization:
------------
class Solution {
    vector<int> DP;
    public:
    int climbStairs(int n) {
        DP.resize(n+1,-1);
        return solve(n);
    }
    public:
    int solve(int n){
        if(n<=1) return 1;
        if(DP[n] != -1) return DP[n];
        return DP[n] = solve(n-1) + solve(n-2);
    }
};
------------
Tabulation :
------------
class Solution {
    vector<int> DP;
    public:
    int climbStairs(int n) {
        DP.resize(n+1,-1);
        if(n<=1) return 1;
        DP[0] = 1;
        DP[1] = 1;
        for(int i=2;i<=n;i++){
            DP[i] = DP[i-1] + DP[i-2];
        }
        return DP[n];
    }
};
--------------------
Space Optimization :
--------------------
class Solution {
    public:
    int climbStairs(int n) {
        if(n<=1) return 1;
        int first = 1;
        int second = 1;
        for(int i=2;i<=n;i++){
            int next = first + second;
            first = second;
            second = next;
        }
        return second;
    }
};