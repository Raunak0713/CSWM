----------
Recursion:
----------
class Solution:
    def climbStairs(self, n: int) -> int:
        if n <= 1:
            return 1
        return self.climbStairs(n - 1) + self.climbStairs(n - 2)

------------
Memoization:
------------
class Solution:
    def __init__(self):
        self.DP = []

    def climbStairs(self, n: int) -> int:
        self.DP = [-1] * (n + 1)
        return self.solve(n)

    def solve(self, n: int) -> int:
        if n <= 1:
            return 1
        if self.DP[n] != -1:
            return self.DP[n]
        self.DP[n] = self.solve(n - 1) + self.solve(n - 2)
        return self.DP[n]

------------
Tabulation :
------------
class Solution:
    def climbStairs(self, n: int) -> int:
        if n <= 1:
            return 1
        DP = [-1] * (n + 1)
        DP[0] = 1
        DP[1] = 1
        for i in range(2, n + 1):
            DP[i] = DP[i - 1] + DP[i - 2]
        return DP[n]

--------------------
Space Optimization :
--------------------
class Solution:
    def climbStairs(self, n: int) -> int:
        if n <= 1:
            return 1
        first = 1
        second = 1
        for i in range(2, n + 1):
            next_val = first + second
            first = second
            second = next_val
        return second
