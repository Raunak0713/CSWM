----------
Recursion:
----------
class Solution {
    public:
    int minCostClimbingStairs(vector<int>& cost) {
        return min(solve(cost,0),solve(cost,1));
    }

    public:
    int solve(vector<int>& cost,int i){
        int n = cost.size();
        if(i>=n) return 0;
        return cost[i] + min(solve(cost,i+1),solve(cost,i+2));
    }
};
------------
Memoization:
------------
class Solution {
    vector<int> DP;
    public:
    int minCostClimbingStairs(vector<int>& cost) {
        int n = cost.size();
        DP.resize(n + 1, -1);
        return min(solve(cost, 0), solve(cost, 1));
    }
    public:
    int solve(vector<int>& cost, int i) {
        int n = cost.size();
        if (i >= n) return 0;
        if (DP[i] != -1) return DP[i];
        return DP[i] = cost[i] + min(solve(cost, i + 1), solve(cost, i + 2));
    }
};
------------
Tabulation :
------------
class Solution {
    public:
    int minCostClimbingStairs(vector<int>& cost) {
        int n = cost.size();
        if(n==2) return min(cost[0],cost[1]);
        for(int i=2;i<n;i++){
            cost[i] += min(cost[i-1],cost[i-2]);
        }
        return min(cost[n-1],cost[n-2]);
    }
};
--------------------
Space Optimization :
--------------------
class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        int n = cost.size();
        int first = cost[0];
        int second = cost[1];
        if (n<=2) return min(first, second);
        for (int i=2; i<n; i++) {
            int curr = cost[i] + min(first, second);
            first = second;
            second = curr;
        }
        return min(first, second);
    }
};