----------
Recursion:
----------
class Solution {
    public int minCostClimbingStairs(int[] cost) {
        int n = cost.length;
        return Math.min(solve(cost,0),solve(cost,1));
    }
    public int solve(int[] cost,int i){
        if(i>=cost.length) return 0;
        return cost[i] + Math.min(solve(cost,i+1),solve(cost,i+2));
    }
}
------------
Memoization:
------------
class Solution {
    int[] DP;
    public int minCostClimbingStairs(int[] cost) {
        int n = cost.length;
        DP = new int[n+1];
        Arrays.fill(DP,-1);
        return Math.min(solve(cost,0),solve(cost,1));
    }
    public int solve(int[] cost,int i){
        if(i>=cost.length) return 0;
        if(DP[i] != -1) return DP[i];
        return DP[i] = cost[i] + Math.min(solve(cost,i+1),solve(cost,i+2));
    }
}
------------
Tabulation :
------------
class Solution {
    public int minCostClimbingStairs(int[] cost) {
        int n = cost.length;
        if(n==2) return Math.min(cost[0],cost[1]);
        for(int i=2;i<n;i++){
            cost[i] += Math.min(cost[i-1],cost[i-2]);
        }
        return Math.min(cost[n-1],cost[n-2]);
    }
}
--------------------
Space Optimization :
--------------------
class Solution {
    public int minCostClimbingStairs(int[] cost) {
        int n = cost.length;
        int first = cost[0];
        int second = cost[1];
        if (n<=2) return Math.min(first, second);
        for (int i=2; i<n; i++) {
            int curr = cost[i] + Math.min(first, second);
            first = second;
            second = curr;
        }
        return Math.min(first, second);
    }
}