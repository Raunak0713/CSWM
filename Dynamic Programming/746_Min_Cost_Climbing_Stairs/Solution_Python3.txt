----------
Recursion:
----------
class Solution:
    def minCostClimbingStairs(self, cost: List[int]) -> int:
        def solve(cost, i):
            if i >= len(cost):
                return 0
            return cost[i] + min(solve(cost, i + 1), solve(cost, i + 2))
        
        return min(solve(cost, 0), solve(cost, 1))
------------
Memoization:
------------
class Solution:
    def minCostClimbingStairs(self, cost: List[int]) -> int:
        n = len(cost)
        DP = [-1] * (n + 1)
        
        def solve(cost, i):
            if i >= len(cost):
                return 0
            if DP[i] != -1:
                return DP[i]
            DP[i] = cost[i] + min(solve(cost, i + 1), solve(cost, i + 2))
            return DP[i]
        
        return min(solve(cost, 0), solve(cost, 1))
------------
Tabulation :
------------
class Solution:
    def minCostClimbingStairs(self, cost: List[int]) -> int:
        n = len(cost)
        if n == 2:
            return min(cost[0], cost[1])
        
        for i in range(2, n):
            cost[i] += min(cost[i - 1], cost[i - 2])
        
        return min(cost[n - 1], cost[n - 2])
--------------------
Space Optimization :
--------------------
class Solution:
    def minCostClimbingStairs(self, cost: List[int]) -> int:
        n = len(cost)
        if n <= 2:
            return min(cost[0], cost[1])
        
        first = cost[0]
        second = cost[1]
        
        for i in range(2, n):
            curr = cost[i] + min(first, second)
            first = second
            second = curr
        
        return min(first, second)
